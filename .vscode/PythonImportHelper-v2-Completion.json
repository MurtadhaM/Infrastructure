[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "colorsys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorsys",
        "description": "colorsys",
        "detail": "colorsys",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "select",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "select",
        "description": "select",
        "detail": "select",
        "documentation": {}
    },
    {
        "label": "fcntl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fcntl",
        "description": "fcntl",
        "detail": "fcntl",
        "documentation": {}
    },
    {
        "label": "rules_maker",
        "kind": 2,
        "importPath": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "description": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "peekOfCode": "def rules_maker(description=\"empty\", regexp=\"empty\", colors=\"empty\", count=\"empty\", exclusive=\"false\"):\n    # RETURN A DICTIONARY\n    return {\"description\": description, \"regexp\": regexp, \"colors\": colors, \"count\": count, \"exclusive\": exclusive}\nrules = []\n# READ THE FILE\ndef file_to_list(filepath):\n    with open(filepath) as f:\n        content = f.readlines()\n    content = [x.strip() for x in content] \n    return content",
        "detail": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "documentation": {}
    },
    {
        "label": "file_to_list",
        "kind": 2,
        "importPath": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "description": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "peekOfCode": "def file_to_list(filepath):\n    with open(filepath) as f:\n        content = f.readlines()\n    content = [x.strip() for x in content] \n    return content\n# CREATE THE OUTPUT FOLDER\ndef create_output_folder(output_folder):\n    if not os.path.exists(output_folder):\n        os.makedirs(output_folder)\n        print(\"Output folder created: \" + output_folder)",
        "detail": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "documentation": {}
    },
    {
        "label": "create_output_folder",
        "kind": 2,
        "importPath": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "description": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "peekOfCode": "def create_output_folder(output_folder):\n    if not os.path.exists(output_folder):\n        os.makedirs(output_folder)\n        print(\"Output folder created: \" + output_folder)\n    else:\n        print(\"Output folder already exists: \" + output_folder)\n    return output_folder\n# Process the file\ndef process_file(filepath, output_folder):\n    \"\"\"",
        "detail": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "documentation": {}
    },
    {
        "label": "process_file",
        "kind": 2,
        "importPath": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "description": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "peekOfCode": "def process_file(filepath, output_folder):\n    \"\"\"\nRULES:\n# FOR EACH LINE THAT STARTS WITH \"#\" ASSIGN TO \"description\"\n# FOR EACH LINE THAT STARTS WITH \"regexp=\" ASSIGN TO \"regexp\"\n# FOR EACH LINE THAT STARTS WITH \"colors=\" ASSIGN TO \"colors\" separated by space\n# FOR EACH \".........\" or \"=======\" start a new rule\n#EXAMPLE OUTPUT from:\n# checking\nregexp=\\bchecking\\s*(for|if|whether|command|how|that)?(\\s*to)?\\b",
        "detail": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "documentation": {}
    },
    {
        "label": "replace_colors",
        "kind": 2,
        "importPath": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "description": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "peekOfCode": "def replace_colors(colors):\n    new_colors=[]\n    for color in colors:\n        new_colors.append(colorsys.hsv_to_rgb(random.random(), 1, 1))\n        # convert to HEX\n        new_colors[-1] = '#%02x%02x%02x' % (int(new_colors[-1][0]*255), int(new_colors[-1][1]*255), int(new_colors[-1][2]*255))\n    return new_colors\ndef filewriter(filepath, content):\n    \"\"\"\n  - description: Numbers",
        "detail": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "documentation": {}
    },
    {
        "label": "filewriter",
        "kind": 2,
        "importPath": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "description": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "peekOfCode": "def filewriter(filepath, content):\n    \"\"\"\n  - description: Numbers\n    regex: \\b(?<!\\.)\\d\n    #optional values\n    exclusive: true\n    \"\"\"\n    # DEFINE THE FINAL OUTPUT STRING\n    FINAL_OUTPUT_STRING = \"\"\n    # FOR EACH RULE IN THE LIST",
        "detail": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "description": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "peekOfCode": "def main():\n    # parse the arguments\n    parser = argparse.ArgumentParser(description='Process the file')\n    parser.add_argument('filepath', metavar='filepath', type=str, help='filepath to the file containing the list of files to be processed')\n    parser.add_argument('output_folder', metavar='output_folder', type=str, help='output folder')\n    args = parser.parse_args()\n    # create the output folder\n    output_folder = create_output_folder(args.output_folder)\n    # process the file\n    output_file = process_file(args.filepath, output_folder)",
        "detail": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "documentation": {}
    },
    {
        "label": "rules",
        "kind": 5,
        "importPath": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "description": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "peekOfCode": "rules = []\n# READ THE FILE\ndef file_to_list(filepath):\n    with open(filepath) as f:\n        content = f.readlines()\n    content = [x.strip() for x in content] \n    return content\n# CREATE THE OUTPUT FOLDER\ndef create_output_folder(output_folder):\n    if not os.path.exists(output_folder):",
        "detail": "Administration.Colorize CLI.GRC_RULES_CONVERTER",
        "documentation": {}
    },
    {
        "label": "openai.api_key",
        "kind": 5,
        "importPath": "AI.OpenAI",
        "description": "AI.OpenAI",
        "peekOfCode": "openai.api_key = os.getenv(\"OPENAI_API_KEY\")\nresponse = openai.Completion.create(\n  model=\"text-davinci-003\",\n  prompt=\"\",\n  temperature=0,\n  max_tokens=100,\n  top_p=1.0,\n  frequency_penalty=0.0,\n  presence_penalty=0.0\n)",
        "detail": "AI.OpenAI",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "AI.OpenAI",
        "description": "AI.OpenAI",
        "peekOfCode": "response = openai.Completion.create(\n  model=\"text-davinci-003\",\n  prompt=\"\",\n  temperature=0,\n  max_tokens=100,\n  top_p=1.0,\n  frequency_penalty=0.0,\n  presence_penalty=0.0\n)",
        "detail": "AI.OpenAI",
        "documentation": {}
    },
    {
        "label": "hostname",
        "kind": 5,
        "importPath": "Networking.EVE-NG.CiscoKeyGen",
        "description": "Networking.EVE-NG.CiscoKeyGen",
        "peekOfCode": "hostname = socket.gethostname()\nioukey=int(hostid,16)\nfor x in hostname:\n ioukey = ioukey + ord(x)\nprint \"hostid=\" + hostid +\", hostname=\"+ hostname + \", ioukey=\" + hex(ioukey)[2:]\n# create the license using md5sum\niouPad1='\\x4B\\x58\\x21\\x81\\x56\\x7B\\x0D\\xF3\\x21\\x43\\x9B\\x7E\\xAC\\x1D\\xE6\\x8A'\niouPad2='\\x80' + 39*'\\0'\nmd5input=iouPad1 + iouPad2 + struct.pack('!L', ioukey) + iouPad1\niouLicense=hashlib.md5(md5input).hexdigest()[:16]",
        "detail": "Networking.EVE-NG.CiscoKeyGen",
        "documentation": {}
    },
    {
        "label": "RipEntry",
        "kind": 6,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "class RipEntry:\n    def __init__(self, af, tag, ipaddr, mask, nexthop, metric):\n        self.af_      = af\t\t# must be socket.AF_INET (=2)\n        self.tag_     = tag\t\t# must be zero\n        self.ipaddr_  = ipaddr\t\t# in 32-bit numeric format\n        self.mask_    = mask\t\t# in 32-bit numeric format\n        self.nexthop_ = nexthop\t\t# zero means send to neighbor that advertised route\n        self.metric_  = metric\n    def ipaddr(self): return self.ipaddr_\n    def mask(self):   return self.mask_",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "TableKey",
        "kind": 6,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "class TableKey:\n    def __init__(self, ipaddrn, netmaskn):    # ipaddrn and netmaskn as 32-bit integers\n        self.ipaddrn_  = ipaddrn\n        self.netmaskn_ = netmaskn\n    def ipaddr(self): return self.ipaddrn_\n    def netmask(self):   return self.netmaskn_\n    def __hash__(self):\n        return hash(self.ipaddrn_) ^ hash(self.netmaskn_)\n    def __eq__(self, other):\n        if isinstance(other, self.__class__):",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "TableValue",
        "kind": 6,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "class TableValue:\n    def __init__(self, interface, nexthop, metric):\n        self.interface_ = interface\t# never used here; might be needed for poison reverse\n        self.nexthop_   = nexthop\t# in dotted-quad string format\n        \t\t\t\t# zero means send to neighbor that advertised route\n        self.metric_    = metric\n    def interface(self): return self.interface_\n    def nexthop(self):   return self.nexthop_\n    def metric(self):    return self.metric_\n# RTable is our current dictionary of <TableKey,TableValue> pairs, a shadow copy of the real forwarding table",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "def main(): \n    IFADDRS = getifaddrdict()\n    myInterfaces = list(IFADDRS.keys())\n    myIPaddrs = list(map(lambda x: x[0], IFADDRS.values()))\n    print('interfaces:', list(IFADDRS.keys()))\n    print('ipaddrs:', list(map(lambda x: x[0], IFADDRS.values())))\n    socks = createMcastSockets(IFADDRS)\n    starttime = time.time()\n    next_update_time = starttime\n    while True:",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "getifaddrdict",
        "kind": 2,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "def getifaddrdict():\n    myInterfaces = os.listdir('/sys/class/net/')\t# now use SIOCGIFADDR, SIOCGIFNETMASK\n    myInterfaces.remove('lo')\t\t# we don't want to multicast to ourself!\n    ifaddrs = {}\n    for intf in myInterfaces:\n        ifaddrs[intf] = get_ip_info(intf)\n    return ifaddrs\n# get first IP address and netmask of an interface, in dotted-quad format\ndef get_ip_info(intf):\n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "get_ip_info",
        "kind": 2,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "def get_ip_info(intf):\n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    SIOCGIFADDR    = 0x8915\t# from /usr/include/linux/sockios.h\n    SIOCGIFNETMASK = 0x891b\n    intfpack = struct.pack('256s', bytes(intf, 'ascii'))\n    # ifreq, below, is like struct ifreq in /usr/include/linux/if.h\n    ifreq    = fcntl.ioctl(s.fileno(), SIOCGIFADDR, intfpack)  \n    ipaddrn  = ifreq[20:24]\t# 20 is the offset of the IP addr in ifreq\n    ipaddr   = socket.inet_ntoa(ipaddrn)\n    netmaskn = fcntl.ioctl(s.fileno(), SIOCGIFNETMASK, intfpack)[20:24]  ",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "createMcastSockets",
        "kind": 2,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "def createMcastSockets(ifaddrs):\n    socks = []\n    for intf in ifaddrs:\n        (ipaddr, netmask)  = ifaddrs[intf]\n        ipaddrn = aton(ipaddr)  \t# convert to 32-bit numeric format\n        netmaskn= aton(netmask)\n        subnetn = ipaddrn & netmaskn\n        RTable[TableKey(subnetn, netmaskn)] = TableValue(intf, None, 1)\n        print ('interface: '+intf)\n        print('ipaddr of {} is {}/{}'.format(intf, ipaddr, slash(netmaskn)))",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "update_tables",
        "kind": 2,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "def update_tables(riplist, update_sender):\n    global RTable\n    for entry in riplist:\n        if entry.af() != socket.AF_INET: continue\n        if entry.tag()!= 0: continue;\n        if entry.nexthop()!= 0: continue\n        ipaddrn = entry.ipaddr()\t# n for numeric form\n        netmaskn = entry.mask()\n        ipaddr = ntoa(ipaddrn)\n        netmask = ntoa(netmaskn)",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "send_update",
        "kind": 2,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "def send_update(socks):\n    buf = struct.pack('>BBh', UPDATECMD, VER_RIP2, 0)   # two unsigned bytes and a halfword, in network byte order\n    for dest in RTable:\n        ipaddrn = dest.ipaddr()\n        netmaskn = dest.netmask()\n        cost = RTable[dest].metric()\n        buf += struct.pack('>HHIIII', socket.AF_INET,0, ipaddrn,netmaskn,0,cost)\n    for s in socks:\n        s.sendto(buf, (MADDR, MPORT))\n# The following alternative send_update is used to send demonstration text messages instead of RIP updates",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "send_update2",
        "kind": 2,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "def send_update2(socks):\n    buf = struct.pack('>BBh', TEXTMSGCMD, VER_RIP2, 0)   # two unsigned bytes and a halfword, in network byte order\n    buf += 'here is the multicast message'.encode('utf-8')\n    print('sending multicast message')\n    for s in socks:\n        s.sendto(buf, (MADDR, MPORT))\ndef parse_msg(msg, src):\n    offset = RIP_HEADER_SIZE;\n    riplist = []\n    while len(msg)-offset >= RIP_ENTRY_SIZE:",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "parse_msg",
        "kind": 2,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "def parse_msg(msg, src):\n    offset = RIP_HEADER_SIZE;\n    riplist = []\n    while len(msg)-offset >= RIP_ENTRY_SIZE:\n        (af, tag, ipaddr, mask, nexthop, metric) = struct.unpack_from('>HHIIII', msg, offset)\n        offset += RIP_ENTRY_SIZE\n        if af != socket.AF_INET: \n            continue\n        riplist.append(RipEntry(af, tag, ipaddr, mask, nexthop, metric))\n    return riplist",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "validate_header",
        "kind": 2,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "def validate_header(msg, src):\n    (command, version, zero) = struct.unpack_from('>BBh', msg, 0)\n    if command==UPDATECMD and version == VER_RIP2 and zero==0:\n        return True\n    elif command == TEXTMSGCMD:\n        print('text message from {}: {}'.format(src, msg[4:].decode('utf-8')))\n        return False\n    else:\n        print('received unknown RIPv2 message')\n        return False",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "slash",
        "kind": 2,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "def slash(maskn):\n    i = 0\n    while maskn & 0xffffffff != 0:\n       maskn = maskn << 1\n       i += 1\n    return i\ndef aton(ip):\n    return struct.unpack(\">I\", socket.inet_aton(ip))[0]\ndef ntoa(ip):\n    return socket.inet_ntoa(struct.pack(\">I\", ip))",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "aton",
        "kind": 2,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "def aton(ip):\n    return struct.unpack(\">I\", socket.inet_aton(ip))[0]\ndef ntoa(ip):\n    return socket.inet_ntoa(struct.pack(\">I\", ip))\nmain()",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "ntoa",
        "kind": 2,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "def ntoa(ip):\n    return socket.inet_ntoa(struct.pack(\">I\", ip))\nmain()",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "MADDR",
        "kind": 5,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "MADDR = '224.0.0.9'\nMPORT = 520\t\t# used as both source and destination port\nUPDATE_INTERVAL = 10\t# seconds; 5-10 is good when run from an xterm\nSOCK_SIZE = 2048\nREAD_TIMEOUT = 1.0\n#IP_MULTICAST_LOOP = 34\n#IP_MULTICAST_IF   = 32\nRIP_ENTRY_SIZE    = 20\nRIP_HEADER_SIZE   = 4\n# RIP flags",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "MPORT",
        "kind": 5,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "MPORT = 520\t\t# used as both source and destination port\nUPDATE_INTERVAL = 10\t# seconds; 5-10 is good when run from an xterm\nSOCK_SIZE = 2048\nREAD_TIMEOUT = 1.0\n#IP_MULTICAST_LOOP = 34\n#IP_MULTICAST_IF   = 32\nRIP_ENTRY_SIZE    = 20\nRIP_HEADER_SIZE   = 4\n# RIP flags\nUPDATECMD  = 2",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "UPDATE_INTERVAL",
        "kind": 5,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "UPDATE_INTERVAL = 10\t# seconds; 5-10 is good when run from an xterm\nSOCK_SIZE = 2048\nREAD_TIMEOUT = 1.0\n#IP_MULTICAST_LOOP = 34\n#IP_MULTICAST_IF   = 32\nRIP_ENTRY_SIZE    = 20\nRIP_HEADER_SIZE   = 4\n# RIP flags\nUPDATECMD  = 2\nTEXTMSGCMD = 3\t\t# for the send_update2() demo option, below",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "SOCK_SIZE",
        "kind": 5,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "SOCK_SIZE = 2048\nREAD_TIMEOUT = 1.0\n#IP_MULTICAST_LOOP = 34\n#IP_MULTICAST_IF   = 32\nRIP_ENTRY_SIZE    = 20\nRIP_HEADER_SIZE   = 4\n# RIP flags\nUPDATECMD  = 2\nTEXTMSGCMD = 3\t\t# for the send_update2() demo option, below\nVER_RIP2  = 2",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "READ_TIMEOUT",
        "kind": 5,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "READ_TIMEOUT = 1.0\n#IP_MULTICAST_LOOP = 34\n#IP_MULTICAST_IF   = 32\nRIP_ENTRY_SIZE    = 20\nRIP_HEADER_SIZE   = 4\n# RIP flags\nUPDATECMD  = 2\nTEXTMSGCMD = 3\t\t# for the send_update2() demo option, below\nVER_RIP2  = 2\n# do we actually make calls to change the system forwarding tables?",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "#IP_MULTICAST_LOOP",
        "kind": 5,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "#IP_MULTICAST_LOOP = 34\n#IP_MULTICAST_IF   = 32\nRIP_ENTRY_SIZE    = 20\nRIP_HEADER_SIZE   = 4\n# RIP flags\nUPDATECMD  = 2\nTEXTMSGCMD = 3\t\t# for the send_update2() demo option, below\nVER_RIP2  = 2\n# do we actually make calls to change the system forwarding tables?\nMODTABLES = True",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "TEXTMSGCMD",
        "kind": 5,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "TEXTMSGCMD = 3\t\t# for the send_update2() demo option, below\nVER_RIP2  = 2\n# do we actually make calls to change the system forwarding tables?\nMODTABLES = True\n\"\"\"\nheader word: command(1), version(1), zero(2). As bytes: [2,2,0,0]\nrip_entry: AF(2), route_tag(2), IP_addr(4), mask(4), next_hop(4), metric(4)\n\"\"\"\n# arriving RIPv2 messages are parsed into class RipEntry objects\nclass RipEntry:",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "MODTABLES",
        "kind": 5,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "MODTABLES = True\n\"\"\"\nheader word: command(1), version(1), zero(2). As bytes: [2,2,0,0]\nrip_entry: AF(2), route_tag(2), IP_addr(4), mask(4), next_hop(4), metric(4)\n\"\"\"\n# arriving RIPv2 messages are parsed into class RipEntry objects\nclass RipEntry:\n    def __init__(self, af, tag, ipaddr, mask, nexthop, metric):\n        self.af_      = af\t\t# must be socket.AF_INET (=2)\n        self.tag_     = tag\t\t# must be zero",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    },
    {
        "label": "RTable",
        "kind": 5,
        "importPath": "Networking.Software-Defined-Networking.rip",
        "description": "Networking.Software-Defined-Networking.rip",
        "peekOfCode": "RTable = {}\t\t\ndef main(): \n    IFADDRS = getifaddrdict()\n    myInterfaces = list(IFADDRS.keys())\n    myIPaddrs = list(map(lambda x: x[0], IFADDRS.values()))\n    print('interfaces:', list(IFADDRS.keys()))\n    print('ipaddrs:', list(map(lambda x: x[0], IFADDRS.values())))\n    socks = createMcastSockets(IFADDRS)\n    starttime = time.time()\n    next_update_time = starttime",
        "detail": "Networking.Software-Defined-Networking.rip",
        "documentation": {}
    }
]